1. GO AIRPORT LOOKUP FUNCTION:
func handleAirportRequest(id string) (Airport, error) {
    id = strings.TrimSpace(id)

    var airport Airport
    db, err := connectMapArchive(STRATUX_HOME + "/www/data/airports.db", true)
    if err != nil {
        return Airport{}, err
    }
    defer db.Close()

    // Query airport main info
    row := db.QueryRow(`
        SELECT ident, name, type, longitude_deg AS lon, latitude_deg AS lat, elevation_ft AS elevation
        FROM airports WHERE ident = ?;
    `, id)
    var lon, lat float64
    var elevation int
    err = row.Scan(&airport.Ident, &airport.Name, &airport.Type, &lon, &lat, &elevation)
    if err == sql.ErrNoRows {
        return Airport{}, fmt.Errorf("not found")
    } else if err != nil {
        return Airport{}, err
    }
    airport.Lon = lon
    airport.Lat = lat
    airport.Elevation = elevation

    // Query frequencies
    freqRows, err := db.Query(`
        SELECT frequency_mhz AS frequency, description FROM frequencies WHERE airport_ident = ?;
    `, id)
    if err != nil {
        return Airport{}, err
    }
    defer freqRows.Close()
    var frequencies []Frequency
    for freqRows.Next() {
        var f Frequency
        err := freqRows.Scan(&f.Frequency, &f.Description)
        if err != nil {
            return Airport{}, err
        }
        frequencies = append(frequencies, f)
    }
    airport.Frequencies = frequencies

    // Query runways
    rwRows, err := db.Query(`
        SELECT length_ft AS length, width_ft AS width, surface, le_ident, he_ident FROM runways WHERE airport_ident = ?;
    `, id)
    if err != nil {
        return Airport{}, err
    }
    defer rwRows.Close()
    var runways []Runway
    for rwRows.Next() {
        var r Runway
        err := rwRows.Scan(&r.Length, &r.Width, &r.Surface, &r.LeIdent, &r.HeIdent)
        if err != nil {
            return Airport{}, err
        }
        runways = append(runways, r)
    }
    airport.Runways = runways

    return airport, nil
}


2. NODE EXPRESS AIRPORT LOOKUP FUNCTION:
function handleAirportRequest(id) {
    const sql = `
        SELECT
        airports.ident,
        airports.name,
        airports.type,
        airports.longitude_deg AS lon,
        airports.latitude_deg AS lat,
        airports.elevation_ft AS elevation,
        (
            SELECT json_group_array(
                json_object(
                    'frequency', frequency_mhz,
                    'description', description
                )
            )
            FROM frequencies
            WHERE frequencies.airport_ident = airports.ident
        ) AS frequencies,
        (
            SELECT json_group_array(
                json_object(
                    'length', length_ft,
                    'width', width_ft,
                    'surface', surface,
                    'le_ident', le_ident,
                    'he_ident', he_ident
                )
            )
            FROM runways
            WHERE runways.airport_ident = airports.ident
        ) AS runways,
        airports.wikipedia_link
        FROM airports
        WHERE airports.ident = ?;
    `;
    try {
        let obj = apdb.prepare(sql).get(id);
        if (obj) {
            obj.frequencies = obj.frequencies ? JSON.parse(obj.frequencies) : [];
            obj.runways = obj.runways ? JSON.parse(obj.runways) : [];
            return obj;
        }
        else {
            return {};
        }
    }
    catch(err) {
        console.log("Error in handleAirportRequest", err);
    }
}

